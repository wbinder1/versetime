#!/usr/bin/env python3
"""
VerseTime Web Interface for Raspberry Pi
Provides a web interface to configure VerseTime display and system settings
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
import json
import os
import subprocess
import glob
from datetime import datetime
import threading
import time

app = Flask(__name__)
app.secret_key = 'versetime_secret_key_2024'

# Configuration file path
CONFIG_FILE = 'config.py'
BACKUP_CONFIG_FILE = 'config_backup.py'

class VerseTimeConfig:
    def __init__(self):
        self.config_file = CONFIG_FILE
        self.load_config()
    
    def load_config(self):
        """Load current configuration"""
        self.config = {
            'BIBLE_VERSION': 'en-kjv',
            'UPDATE_INTERVAL': 60,
            'SHOW_TIME': True,
            'SHOW_DATE': True,
            'CLEAR_SCREEN': True,
            'MAX_LINE_LENGTH': 70,
            'TIME_FORMAT': '%I:%M %p',
            'DATE_FORMAT': '%A, %B %d, %Y',
            'USE_TIME_BASED_SELECTION': True,
            'DISPLAY_TITLE': 'VERSE TIME',
            'BORDER_CHAR': '=',
            'INDENT_SIZE': 10
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    content = f.read()
                    # Parse the config file (simple approach)
                    for line in content.split('\n'):
                        if '=' in line and not line.strip().startswith('#'):
                            key, value = line.split('=', 1)
                            key = key.strip()
                            value = value.strip().strip('"\'')
                            
                            if key in self.config:
                                if value.lower() in ['true', 'false']:
                                    self.config[key] = value.lower() == 'true'
                                elif value.isdigit():
                                    self.config[key] = int(value)
                                else:
                                    self.config[key] = value
            except Exception as e:
                print(f"Error loading config: {e}")
    
    def save_config(self):
        """Save configuration to file"""
        try:
            # Create backup
            if os.path.exists(self.config_file):
                os.rename(self.config_file, BACKUP_CONFIG_FILE)
            
            with open(self.config_file, 'w') as f:
                f.write("# VerseTime Configuration File\n")
                f.write("# Generated by web interface\n\n")
                
                for key, value in self.config.items():
                    if isinstance(value, bool):
                        f.write(f"{key} = {str(value)}\n")
                    elif isinstance(value, int):
                        f.write(f"{key} = {value}\n")
                    else:
                        f.write(f'{key} = "{value}"\n')
            
            return True
        except Exception as e:
            print(f"Error saving config: {e}")
            # Restore backup if save failed
            if os.path.exists(BACKUP_CONFIG_FILE):
                os.rename(BACKUP_CONFIG_FILE, self.config_file)
            return False
    
    def update_config(self, updates):
        """Update configuration with new values"""
        for key, value in updates.items():
            if key in self.config:
                if isinstance(self.config[key], bool):
                    self.config[key] = bool(value)
                elif isinstance(self.config[key], int):
                    self.config[key] = int(value)
                else:
                    self.config[key] = str(value)
        
        return self.save_config()

class SystemManager:
    def __init__(self):
        self.wifi_config_file = '/etc/wpa_supplicant/wpa_supplicant.conf'
    
    def get_available_bibles(self):
        """Get list of available Bible versions"""
        bibles = []
        bible_dir = 'bibles'
        if os.path.exists(bible_dir):
            for item in os.listdir(bible_dir):
                if os.path.isdir(os.path.join(bible_dir, item)) and not item.startswith('.'):
                    # Try to get Bible info
                    info_file = os.path.join(bible_dir, item, f'{item}.json')
                    if os.path.exists(info_file):
                        try:
                            with open(info_file, 'r') as f:
                                info = json.load(f)
                                name = info.get('localVersionName', item)
                                bibles.append({
                                    'id': item,
                                    'name': name,
                                    'description': info.get('description', '')
                                })
                        except:
                            bibles.append({'id': item, 'name': item, 'description': ''})
        return bibles
    
    def get_system_info(self):
        """Get system information"""
        info = {}
        
        # CPU info
        try:
            with open('/proc/cpuinfo', 'r') as f:
                for line in f:
                    if line.startswith('Model'):
                        info['model'] = line.split(':')[1].strip()
                        break
        except:
            info['model'] = 'Unknown'
        
        # Memory info
        try:
            with open('/proc/meminfo', 'r') as f:
                for line in f:
                    if line.startswith('MemTotal'):
                        mem_kb = int(line.split()[1])
                        info['memory'] = f"{mem_kb // 1024} MB"
                        break
        except:
            info['memory'] = 'Unknown'
        
        # Disk usage
        try:
            result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                if len(lines) > 1:
                    parts = lines[1].split()
                    if len(parts) >= 5:
                        info['disk_usage'] = f"{parts[4]} used"
        except:
            info['disk_usage'] = 'Unknown'
        
        # Temperature (Raspberry Pi specific)
        try:
            result = subprocess.run(['vcgencmd', 'measure_temp'], capture_output=True, text=True)
            if result.returncode == 0:
                temp = result.stdout.strip().split('=')[1]
                info['temperature'] = temp
                # Convert to Fahrenheit
                try:
                    temp_c = float(temp.replace('°C', ''))
                    temp_f = (temp_c * 9/5) + 32
                    info['temperature_f'] = f"{temp_f:.1f}°F"
                except:
                    info['temperature_f'] = 'Unknown'
        except:
            info['temperature'] = 'Unknown'
            info['temperature_f'] = 'Unknown'
        
        return info
    
    def get_battery_info(self):
        """Get battery information if available"""
        battery_info = {}
        
        # Check for battery in /sys/class/power_supply
        try:
            battery_dirs = glob.glob('/sys/class/power_supply/BAT*')
            if battery_dirs:
                battery_dir = battery_dirs[0]  # Use first battery
                
                # Get battery percentage
                try:
                    with open(os.path.join(battery_dir, 'capacity'), 'r') as f:
                        capacity = int(f.read().strip())
                        battery_info['percentage'] = capacity
                        
                        # Get battery status
                        try:
                            with open(os.path.join(battery_dir, 'status'), 'r') as f:
                                status = f.read().strip()
                                battery_info['status'] = status
                        except:
                            battery_info['status'] = 'Unknown'
                            
                except:
                    battery_info['percentage'] = None
                    battery_info['status'] = 'Unknown'
            else:
                battery_info['percentage'] = None
                battery_info['status'] = 'No battery'
        except:
            battery_info['percentage'] = None
            battery_info['status'] = 'Unknown'
        
        return battery_info
    
    def scan_wifi_networks(self):
        """Scan for available WiFi networks"""
        networks = []
        try:
            result = subprocess.run(['sudo', 'iwlist', 'wlan0', 'scan'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                current_ssid = None
                current_encryption = None
                current_signal = None
                
                for line in lines:
                    if 'ESSID:' in line:
                        ssid = line.split('"')[1] if '"' in line else line.split(':')[1].strip()
                        if ssid and ssid != '':
                            current_ssid = ssid
                    elif 'Encryption key:' in line and current_ssid:
                        encrypted = 'on' in line
                        current_encryption = 'WPA/WPA2' if encrypted else 'Open'
                    elif 'Quality=' in line and current_ssid:
                        try:
                            quality_part = line.split('Quality=')[1].split()[0]
                            signal_strength = int(quality_part.split('/')[0])
                            current_signal = signal_strength
                        except:
                            current_signal = 0
                    elif 'IE: IEEE 802.11i' in line and current_ssid:
                        # End of network info, add to list
                        networks.append({
                            'ssid': current_ssid,
                            'encryption': current_encryption or 'Unknown',
                            'signal': current_signal or 0
                        })
                        current_ssid = None
                        current_encryption = None
                        current_signal = None
        except:
            pass
        return networks
    
    def get_wifi_networks(self):
        """Get available WiFi networks"""
        networks = []
        try:
            result = subprocess.run(['iwlist', 'wlan0', 'scan'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                current_ssid = None
                for line in lines:
                    if 'ESSID:' in line:
                        ssid = line.split('"')[1] if '"' in line else line.split(':')[1].strip()
                        if ssid and ssid != '':
                            current_ssid = ssid
                    elif 'Encryption key:' in line and current_ssid:
                        encrypted = 'on' in line
                        networks.append({
                            'ssid': current_ssid,
                            'encrypted': encrypted
                        })
                        current_ssid = None
        except:
            pass
        return networks
    
    def add_wifi_network(self, ssid, password):
        """Add a new WiFi network"""
        try:
            # Create wpa_supplicant entry
            config = f"""
network={{
    ssid="{ssid}"
    psk="{password}"
    key_mgmt=WPA-PSK
}}
"""
            
            # Append to wpa_supplicant.conf
            with open(self.wifi_config_file, 'a') as f:
                f.write(config)
            
            # Restart networking
            subprocess.run(['sudo', 'systemctl', 'restart', 'wpa_supplicant'])
            return True
        except Exception as e:
            print(f"Error adding WiFi network: {e}")
            return False
    
    def restart_versetime_service(self):
        """Restart the VerseTime service"""
        try:
            subprocess.run(['sudo', 'systemctl', 'restart', 'versetime.service'])
            return True
        except:
            return False

# Global instances
config_manager = VerseTimeConfig()
system_manager = SystemManager()

@app.route('/')
def home():
    """Home page with VerseTime configuration"""
    bibles = system_manager.get_available_bibles()
    current_bible = config_manager.config['BIBLE_VERSION']
    
    return render_template('home.html', 
                         config=config_manager.config,
                         bibles=bibles,
                         current_bible=current_bible)

@app.route('/settings')
def settings():
    """Settings page with system configuration"""
    system_info = system_manager.get_system_info()
    wifi_networks = system_manager.get_wifi_networks()
    battery_info = system_manager.get_battery_info()
    
    return render_template('settings.html',
                         system_info=system_info,
                         wifi_networks=wifi_networks,
                         battery_info=battery_info)

@app.route('/api/update_config', methods=['POST'])
def update_config():
    """Update VerseTime configuration"""
    try:
        data = request.get_json()
        if config_manager.update_config(data):
            # Restart service if running
            system_manager.restart_versetime_service()
            return jsonify({'success': True, 'message': 'Configuration updated successfully'})
        else:
            return jsonify({'success': False, 'message': 'Failed to update configuration'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error: {str(e)}'})

@app.route('/api/add_wifi', methods=['POST'])
def add_wifi():
    """Add a new WiFi network"""
    try:
        data = request.get_json()
        ssid = data.get('ssid')
        password = data.get('password')
        
        if not ssid or not password:
            return jsonify({'success': False, 'message': 'SSID and password are required'})
        
        if system_manager.add_wifi_network(ssid, password):
            return jsonify({'success': True, 'message': 'WiFi network added successfully'})
        else:
            return jsonify({'success': False, 'message': 'Failed to add WiFi network'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error: {str(e)}'})

@app.route('/api/system_info')
def get_system_info():
    """Get current system information"""
    return jsonify(system_manager.get_system_info())

@app.route('/api/battery_info')
def get_battery_info():
    """Get current battery information"""
    return jsonify(system_manager.get_battery_info())

@app.route('/api/scan_wifi', methods=['POST'])
def scan_wifi():
    """Scan for available WiFi networks"""
    networks = system_manager.scan_wifi_networks()
    return jsonify(networks)

@app.route('/api/restart_service', methods=['POST'])
def restart_service():
    """Restart VerseTime service"""
    if system_manager.restart_versetime_service():
        return jsonify({'success': True, 'message': 'Service restarted successfully'})
    else:
        return jsonify({'success': False, 'message': 'Failed to restart service'})

if __name__ == '__main__':
    print("Starting VerseTime Web Interface...")
    print("Access the interface at: http://versetime.local or http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=False) 